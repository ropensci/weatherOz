
---
title: "weatherOz for SILO"
author: "Rodrigo Pires, Anna Hepworth, Rebecca O'Leary and Adam H. Sparks"
output:
  rmarkdown::html_vignette:
    toc: true
vignette: >
  %\VignetteIndexEntry{weatherOz for SILO}
  %\VignetteEngine{knitr::rmarkdown_notangle}
  %\VignetteEncoding{UTF-8}
bibliography: bibliography.bib
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(collapse = TRUE,
                      comment = "#>",
                      fig.width = 7,
                      fig.height = 7,
                      fig.align = "center",
                      fig.path = "vignettes/")
ex_cnt <- 0
```

## About SILO Data

[Queensland Scientific Information for Landowners (SILO)](https://www.longpaddock.qld.gov.au/silo/about/) data sets are constructed from observational records provided by the Bureau of Meteorology (BOM).
SILO interpolates the raw data to fill missing data creating data sets that are spatially and temporally complete [@Jeffrey2001].

## A Note on API Keys

All examples in this vignette assume that you have stored your API key in your .Renviron file.
See [Chapter 8](https://rstats.wtf/r-startup.html#renviron) in "What They Forgot to Teach You About R" by Bryan _et al._ for more on storing details in your .Renviron if you are unfamiliar.

## Working With SILO Data

Four functions are provided to streamline fetching data from the SILO API endpoints.

 * `get_data_drill()`, which returns weather data from SILO's 0.05 x 0.05 degrees interpolated, gridded weather dataset;
 * `get_patched_point()`, which returns weather data from a given BOM weather station (a point) in the SILO database where missing values are interpolated (patched);
 * `get_data_drill_apsim()`, which returns data drill weather data in an {apsimx} `.met` class object with the weather data ready for use in APSIM; and
 * `get_patched_point_apsim()`, which returns patched point weather data in an {apsimx} `.met` class object with the weather data ready for use in APSIM.

## Available Values

`get_data_drill()` and `get_patched_point()` both accept the following values.
`get_data_drill_apsim()` and `get_patched_point_apsim()` return a canned set of values for use in APSIM, because of this, they do not accept a `values` argument.

<dl>
  <dt>all</dt><dd>Which will return all of the following values</dd>
  <dt>max_temp (degrees C)</dt><dd>Maximum temperature</dd>
  <dt>min_temp (degrees C)</dt><dd>Minimum temperature</dd>
  <dt>vp (hPa)</dt><dd>Vapour pressure</dd>
  <dt>vp_deficit (hPa)</dt><dd>Vapour pressure deficit</dd>
  <dt>evap_pan (mm)</dt><dd>Class A pan evaporation</dd>
  <dt>evap_syn (mm)</dt><dd>Synthetic estimate [@Rayner2005]</dd>
  <dt>evap_comb (mm)</dt><dd>Combination (synthetic estimate pre-1970, class A pan 1970 onwards)</dd>
  <dt>evap_morton_lake (mm)</dt><dd>Morton's shallow lake evaporation</dd>
  <dt>radiation (Mj/m [@Morton1983])</dt><dd>Solar exposure, consisting of both direct and diffuse components</dd>
  <dt>rh_tmax (%)</dt><dd>Relative humidity at the time of maximum temperature</dd>
  <dt>rh_tmin (%)</dt><dd>Relative humidity at the time of minimum temperature</dd>
  <dt>et_short_crop (mm)</dt><dd>FAO56 [@Allen1998] short crop</dd>
  <dt>et_tall_crop (mm)</dt><dd>ASCE [@Walter2000] tall crop [@Jeffrey2001]</dd>
  <dt>et_morton_actual (mm)</dt><dd>Morton's areal actual evapotranspiration</dd>
  <dt>et_morton_potential (mm)</dt><dd>Morton's point potential evapotranspiration</dd>
  <dt>et_morton_wet (mm)</dt><dd>Morton's wet-environment areal potential evapotranspiration over land</dd>
  <dt>mslp (hPa)</dt><dd>Mean sea level pressure</dd>
</dl>

## Value Information

Solar radiation: total incoming downward shortwave radiation on a horizontal surface, derived from estimates of cloud oktas and sunshine duration [@Zajaczkowski2013].

Relative humidity: calculated using the vapour pressure measured at 9am, and the saturation vapour pressure computed using either the maximum or minimum temperature [@Jeffrey2001].

Evaporation and evapotranspiration: an overview of the variables provided by SILO is available as a [PDF](https://data.longpaddock.qld.gov.au/static/publications/Evapotranspiration_overview.pdf).

## Data Codes

Where possible (depending on the file format), the data are supplied with codes indicating how each datum was obtained.

<dl>
  <dt>0</dt><dd>Official observation as supplied by the Bureau of Meteorology</dd>
  <dt>15</dt><dd>Deaccumulated rainfall (original observation was recorded over a period exceeding the standard 24 hour observation period)</dd>
  <dt>25</dt><dd>Interpolated from daily observations for that date</dd>
  <dt>26</dt><dd>Synthetic Class A pan evaporation, calculated from temperatures, radiation and vapour pressure</dd>
  <dt>35</dt><dd>Interpolated from daily observations using an anomaly interpolation method</dd>
  <dt>75</dt><dd>Interpolated from the long term averages of daily observations for that day of year</dd>
</dl>

The data returned will include columns that denote the source of the data, whether it was an observation or interpolated.

## Getting Data Drill Interpolated Data

The `get_data_drill()` function fetches spatially interpolated data from SILO for any point in Australia.
Note that these data are not observations, but are interpolated surfaced derived by using either by splining or kriging the observational data.
The arguments required to use this function are minimal with few options.
The location as longitude and latitude, `longitude` and `latitude`, values must be provided along with the start date, `start_date` and the api key, `api_key` (your e-mail address).

### Example `r ex_cnt <- ex_cnt + 1; ex_cnt`: Get Data Drill Data Using Defaults

Using coordinates for Southwood, Qld, get Data Drill data for all values available starting on 2022-01-01.

```{r get_data_drill_default}
library(weatherOz)

(
  southwood <- get_data_drill(
    latitude = -27.85,
    longitude = 150.05,
    start_date = "20220101"
  )
)
```

### Example `r ex_cnt <- ex_cnt + 1; ex_cnt`: Get Data Drill Temperature for a Specific Date Range

Using coordinates for Southwood, Qld, get Data Drill temperature data for January of 2023.

```{r get_data_drill_t_date_range}
library(weatherOz)

(
  southwood_temp <- get_data_drill(
    latitude = -27.85,
    longitude = 150.05,
    start_date = "20230101",
    end_date = "20230131",
    values = c("max_temp", "min_temp")
  )
)
```

### Example `r ex_cnt <- ex_cnt + 1; ex_cnt`: Get Data Drill APSIM-ready Data

For APSIM users, SILO provides an endpoint that serves APSIM formatted data ready for use in this modelling framework.
The `get_data_drill_apsim()` function works just as `get_data_drill()`, it just returns an object that is an {[apsimx]} `met` class rather than a `data.table` and there is no need to specify values as those are predetermined by the API endpoint.
The [write_apsim_met()] function is reexported from [{apsimx}](https://cran.r-project.org/package=apsimx) for convenience in saving .met files.

```{r get_data_drill_apsim}
library(weatherOz)

(
  southwood_apsim <- get_data_drill_apsim(
    latitude = -27.85,
    longitude = 150.05,
    start_date = "20230101",
    end_date = "20231231"
  )
)
```

## Getting Patched Point Data

Patched Point data are derived from actual BOM station observations (PatchedPoint) data and may or may not be interpolated.
Be sure to note the `data_source` column to be sure.
The functions, `get_patched_point()` and `get_patched_point_apsim()` work exactly as their Data Drill counterparts except that they require a station code, `station_code`, rather than longitude and latitude values for the geographic location.

### Example `r ex_cnt <- ex_cnt + 1; ex_cnt`: Get Data Drill Data Using Defaults

Using the station code for Wongan Hills, WA, get all values for June of 2021.

```{r get_patched_point_default}
library(weatherOz)

(
  wongan_hills <- get_patched_point(
    station_code = "008137",
    start_date = "20210601",
    end_date = "20210630"
  )
)
```

## Working With SILO Metadata

Two functions are provided to assist in fetching metadata about the stations.
 * `find_nearby_stations()`, which returns a `data.table` with the nearest weather stations to a given geographic point or known station either in the DPIRD or BOM (from SILO) networks.
 * `get_stations_metadata()`, which returns a `data.table` with the latest and most up-to-date information available from the Weather 2.0 API on the stations' geographic locations, hardware details, *e.g.,* wind mast height, and recording capabilities.

### Finding Nearby Stations

Functions for searching metadata in the SILO network do not require an API key except where you may also interact with the DPIRD API.

### Example `r ex_cnt <- ex_cnt + 1; ex_cnt`: Finding Stations Nearby a Known Station

Query stations and return BOM's stations nearest to the DPIRD Northam, WA station, "NO", returning stations with 50 km of this station.
This requires a DPIRD API key as we're using that station as the starting point.

```{r northam_silo}
library(weatherOz)

(
  wa_stn <- find_nearby_stations(
    station_code = "010111",
    distance_km = 50,
    which_api = "silo"
  )
)
```

### Example `r ex_cnt <- ex_cnt + 1; ex_cnt`: Finding Stations Nearby a Given Longitude and Latitude

Using the longitude and latitude for Northam, WA, find only BOM stations within a 50km radius of this geographic point.

```{r northam_silo_lonlat}
library(weatherOz)

(
  wa_stn_lonlat <- find_nearby_stations(
    longitude = 116.6620,
    latitude = -31.6540,
    distance_km = 50,
    which_api = "silo"
  )
)
```

### Example `r ex_cnt <- ex_cnt + 1; ex_cnt`: Finding Stations in Both the DPIRD and SILO Data Sets

Query stations nearest BOM's Northam, WA station, "010111" and return both DPIRD and SILO/BOM stations within 50 km of this station.
Note the use of an API key for the DPIRD network and that `which_api` is set to "all".

```{r northam_all}
library(weatherOz)

(
  wa_stn_all <- find_nearby_stations(
    station_code = "010111",
    distance_km = 50,
    which_api = "all"
  )
)
```

### Example `r ex_cnt <- ex_cnt + 1; ex_cnt`: Finding Stations in a Bounding Box for Melbourne

Using a (generous) bounding box for Melbourne, VIC using only the SILO API for BOM stations, no API key is needed.

```{r stations_in_bbox}
bbox <- find_stations_in(
  x = c(144.470215, -38.160476, 145.612793, -37.622934),
  which_api = "SILO",
  include_closed = TRUE
)
bbox
```

### Example `r ex_cnt <- ex_cnt + 1; ex_cnt`: Finding the Station Nearest the Centroid of a Bounding Box

Using the same bounding box but only find a single open station nearest the centroid of the bounding box.
This will return a single value in this case as there is only one polygon.
For queries where the polygon has 'n' parts, 'n' results will be returned.

```{r stations_in_centroid}
centroid <- find_stations_in(
  x = c(144.470215, -38.160476, 145.612793, -37.622934),
  which_api = "SILO",
  include_closed = FALSE,
  centroid = TRUE
)
centroid
```

### Getting Station Metadata for the SILO Network Stations

The `get_stations_metadata()` function is shared with the DPIRD functions as well, so this function will retrieve data from both weather APIs.
Shown here is how to use it for SILO data only.

### Example `r ex_cnt <- ex_cnt + 1; ex_cnt`: Get SILO Station Metadata

The `get_stations_metadata()` function allows you to get details about the stations themselves for stations in the DPIRD and SILO (BOM) networks in one function.
Here we demonstrate how to get the metadata for the SILO stations only.

```{r station_metadata}
library(weatherOz)

(metadata <- get_stations_metadata(which_api = "silo"))
```
### Using Metadata to Get Weather Data for a Whole State

Using the metadata, we can get all weather data from stations in a single state like so.

```{r silo-state}
library(weatherOz)
library(data.table)

metadata <- get_stations_metadata(which_api = "silo")

# Subset to the required state
metadata_wa <- subset(metadata, state == "WA")

# Select first 10 to demo
first_ten <- as.list(as.character(metadata_wa$station_code))[1:10]

# Loop through each station_code and give proper names
# We've wrapped it in `suppressMessages()` to keep the output a bit quieter
# as most of the data have interpolated values in them that will repeat for
# every set.

suppressMessages(
  x <-
    lapply(
      X = first_ten,
      FUN = get_patched_point,
      start_date = "20001201",
      end_date = "20001205",
      values = "all"
    )
)

names(x) <- unlist(first_ten)

# Create dataset with station_code column id
rbindlist(x, idcol = "station_code")
```

## References
